server:
  port: 8080

spring:
  # datasource:
  #   url: jdbc:postgresql://${POSTGRES_URL:localhost:5432}/orderdb
  #   username: postgres
  #   password: postgres
  #   driver-class-name: org.postgresql.Driver

  # jpa:
  #   show-sql: true
  #   hibernate:
  #     ddl-auto: update
  #   properties:
  #     hibernate:
  #       dialect: org.hibernate.dialect.PostgreSQLDialect

  datasource:
    url: ${DATASOURCE_URL:jdbc:h2:mem:orderdb}
    username: ${DATASOURCE_USERNAME:sa}
    password: ${DATASOURCE_PASSWORD:password}
    driver-class-name: ${DATASOURCE_DRIVER:org.h2.Driver}

  jpa:
    show-sql: true
    hibernate:
      ddl-auto: ${JPA_HIBERNATE_DDL_AUTO:update}
    properties:
      hibernate:
        dialect: ${JPA_HIBERNATE_DIALECT:org.hibernate.dialect.H2Dialect}

  h2:
    console:
      enabled: true
      settings.web-allow-others: true
  kafka:
   bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
   consumer:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}
  cloud:
#    function:
#      definition: shippingDataProducer
    stream:
      bindings:
        output-out-0:
          destination: order-created

      kafka:
        binder:
          brokers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:localhost:9092}

# Additional application-specific configurations can be added here
INVENTORY_SVC_URL: ${STOCK_URL:http://inventory-svc:8081/api/v1}
SHIPPING_SVC_URL: ${SHIPPING_URL:http://shipping-svc:8082/api/v1}